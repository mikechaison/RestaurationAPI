// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurationAPI.Data;

#nullable disable

namespace RestaurationAPI.Migrations
{
    [DbContext(typeof(RestaurationDbContext))]
    [Migration("20240512232238_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RestaurationAPI.Data.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDrink")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpicy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("RestaurationAPI.Data.DishMenu", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("DishMenus");
                });

            modelBuilder.Entity("RestaurationAPI.Data.DishOrder", b =>
                {
                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("DishId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("DishOrders");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Menu", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("RestaurationAPI.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Address", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Restaurant", "Restaurant")
                        .WithOne("Address")
                        .HasForeignKey("RestaurationAPI.Data.Address", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Address");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurationAPI.Data.DishMenu", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Dish", "Dish")
                        .WithMany("DishMenus")
                        .HasForeignKey("DishId")
                        .IsRequired()
                        .HasConstraintName("FK_DishMenu_Dish");

                    b.HasOne("RestaurationAPI.Data.Menu", "Menu")
                        .WithMany("DishMenus")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_DishMenu_Menu");

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("RestaurationAPI.Data.DishOrder", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Dish", "Dish")
                        .WithMany("DishOrders")
                        .HasForeignKey("DishId")
                        .IsRequired()
                        .HasConstraintName("FK_DishOrder_Dish");

                    b.HasOne("RestaurationAPI.Data.Order", "Order")
                        .WithMany("DishOrders")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_DishOrder_Order");

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Feedback", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Restaurant", "Restaurant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Feedback_Restaurant");

                    b.HasOne("RestaurationAPI.Data.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Like", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Restaurant", "Restaurant")
                        .WithMany("Likes")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Like_Restaurant");

                    b.HasOne("RestaurationAPI.Data.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Like_User");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Menu", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Restaurant", "Restaurant")
                        .WithOne("Menu")
                        .HasForeignKey("RestaurationAPI.Data.Menu", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Restaurant_Menu");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Order", b =>
                {
                    b.HasOne("RestaurationAPI.Data.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK_Order_Restaurant");

                    b.HasOne("RestaurationAPI.Data.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Order_Status");

                    b.HasOne("RestaurationAPI.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Restaurant");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Dish", b =>
                {
                    b.Navigation("DishMenus");

                    b.Navigation("DishOrders");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Menu", b =>
                {
                    b.Navigation("DishMenus");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Order", b =>
                {
                    b.Navigation("DishOrders");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Restaurant", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Feedbacks");

                    b.Navigation("Likes");

                    b.Navigation("Menu");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurationAPI.Data.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurationAPI.Data.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Likes");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
